<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>istio-demos</artifactId>
        <groupId>com.saleson.istio</groupId>
        <version>1.0-SNAPSHOT</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <artifactId>istio-springboot-demo-c</artifactId>

    <properties>
        <maven.compiler.source>8</maven.compiler.source>
        <maven.compiler.target>8</maven.compiler.target>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
        </dependency>
    </dependencies>

    <build>
        <defaultGoal>spring-boot:run</defaultGoal>
        <plugins>
            <!-- jar方式启动 -->
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <executable>true</executable>
                    <layout>JAR</layout>
                    <!-- 指定main方法入口 -->
                    <mainClass>com.saleson.istio.springboot.demo.IstioSpringbootDemo3App</mainClass>
                    <includeSystemScope>true</includeSystemScope>
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>repackage</goal>
                        </goals>
                        <configuration>
                            <attach>false</attach>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- 打包到 docker 服务-->
            <plugin>
                <groupId>com.spotify</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <!--将插件绑定在某个phase执行-->
                <executions>
                    <execution>
                        <id>build-image</id>
                        <!--用户只需执行mvn package ，就会自动执行mvn docker:build-->
                        <phase>package</phase>
                        <goals>
                            <goal>build</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <skipDocker>true</skipDocker>
                    <!--指定生成的镜像名,这里是我们的作者名+项目名-->
                    <imageName>demo-${project.artifactId}:${docker.image.version}</imageName>
                    <!--指定标签 这里指定的是镜像的版本，我们默认版本是latest-->
<!--                    <imageTags>-->
<!--                        <imageTag>latest</imageTag>-->
<!--                    </imageTags>-->
                    <!--指定基础镜像jdk1.8-->
                    <baseImage>java:8-alpine</baseImage>
                    <!--
                    镜像制作人本人信息-->
                    <maintainer>saleson</maintainer>
                    <!--切换到ROOT目录-->
<!--                    <workdir>/ROOT</workdir>-->
                    <!--查看我们的java版本-->
<!--                    <cmd>["java", "-version"]</cmd>-->
                    <!--${project.build.finalName}.jar是打包后生成的jar包的名字-->
                    <runs>
                        <run>apk add -U tzdata</run>
                        <run>cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</run>
                    </runs>
                    <env>
                    </env>
                    <env>
                        <LANG>en_US.UTF-8</LANG>
                        <LANGUAGE>en_US:en</LANGUAGE>
                        <LC_ALL>en_US.UTF-8</LC_ALL>
                    </env>
                    <labels>
                        <label>usage=istio-demo</label>
                    </labels>
                    <entryPoint>exec java -Xmx32m -Xms32m -Xmn32m -Xss256k -jar ${project.build.finalName}.jar --spring.profiles.active=dev</entryPoint>
                    <exposes>
                        <expose>8082</expose>
                    </exposes>
                    <!--指定远程 docker api地址-->
<!--                    <dockerHost>http://localhost:2375</dockerHost>-->
                    <!-- 这里是复制 jar 包到 docker 容器指定目录配置 -->
                    <resources>
                        <resource>
                            <targetPath>/</targetPath>
                            <!--jar 包所在的路径  此处配置的 即对应 target 目录-->
                            <directory>${project.build.directory}</directory>
                            <!--用于指定需要复制的文件 需要包含的 jar包 ，这里对应的是 Dockerfile中添加的文件名　-->
                            <include>${project.build.finalName}.jar</include>
                        </resource>
                    </resources>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>